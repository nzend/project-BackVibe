{
    "openapi": "3.0.1",
    "info": {
      "version": "2.0.2",
      "title": "Swagger Power Pulse",
      "description": "Showing off Power Pulse work",
      "license": {
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
      }
    },
    "consumes": ["application/json", "multipart/form-data"],
    "produces": ["application/json"],
    "servers": [{ "url": "https://power-pulse-rest-api.onrender.com" }, {"url": "http://localhost:3000/api-docs"}],
    "tags": [
      {
        "name": "Users",
        "description": "Users endpoints"
      },
      {
        "name": "Diary",
        "description": "Diary endpoints"
      },
      {
        "name": "Products",
        "description": "Products endpoints"
      },
      {
        "name": "Exercises",
        "description": "Exercises endpoints"
      }
    ],
  
    "paths": {
      "/api/users/register": {
        "post": {
          "tags": ["Users"],
          "summary": "User registration",
          "parameters": [],
          "requestBody": {
            "description": "Registration's object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "User created, registration successful",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RegistrationResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request (invalid request body)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorBadRequestResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorNotFoundResponse"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict (Provided email already exists)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorConflictResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorServerResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/users/login": {
        "post": {
          "tags": ["Users"],
          "summary": "User login",
          "parameters": [],
          "requestBody": {
            "description": "Login's object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Login successful",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request (invalid request body)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorBadRequestResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorNotFoundResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorServerResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/users/current": {
        "get": {
          "tags": ["Users"],
          "summary": "Get current user",
          "parameters": [],
          "security": [{ "Bearer": [] }],
          "responses": {
            "200": {
              "description": "Successful operation, get current user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CurrentUserResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized (email or password is wrong)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorUnauthorizedResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorNotFoundResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorServerResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/users/create": {
        "post": {
          "tags": ["Users"],
          "summary": "User data create",
          "parameters": [],
          "security": [{ "Bearer": [] }],
          "requestBody": {
            "description": "Create user's object-data (multipart/form-data)",
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserDataRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful operation, user  data created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successfulCreateResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request (invalid request body)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorBadRequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized (email or password is wrong)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorUnauthorizedResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorNotFoundResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorServerResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/users/update": {
        "patch": {
          "tags": ["Users"],
          "summary": "User data create",
          "parameters": [],
          "security": [{ "Bearer": [] }],
          "requestBody": {
            "description": "Create user's object-data (multipart/form-data)",
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserDataResponse"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful operation, user  data updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successfulUpdateResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request (invalid request body)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorBadRequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized ",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorUnauthorizedResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorNotFoundResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorServerResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/users/logout": {
        "post": {
          "tags": ["Users"],
          "summary": "User logout",
          "parameters": [],
          "security": [{ "Bearer": [] }],
          "responses": {
            "204": {
              "description": "Logout successful, No Content"
            },
            "401": {
              "description": "Not authorized (email or password is wrong)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorUnauthorizedResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorNotFoundResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorServerResponse"
                  }
                }
              }
            }
          }
        }
      },
  
      "/api/diary": {
        "get": {
          "tags": ["Diary"],
          "summary": "Get Diary list",
          "parameters": [],
          "security": [{ "Bearer": [] }],
          "responses": {
            "200": {
              "description": "Successful operation, boards list is got",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetAllBoardsResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized (email or password is wrong)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorUnauthorizedResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorNotFoundResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorServerResponse"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": ["Diary"],
          "summary": "Add new board",
          "parameters": [],
          "security": [{ "Bearer": [] }],
          "requestBody": {
            "description": "Board's object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddBoardRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Successful operation, new board added",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AddBoardResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request (invalid request body)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorBadRequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized (email or password is wrong)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorUnauthorizedResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorNotFoundResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorServerResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/products": {
        "get": {
          "tags": ["Products"],
          "summary": "Get Products list",
          "parameters": [
            {
              "in": "path",
              "name": "blood",            
              "example": "1",
              "schema": {
                "minimum": 1
              }
            },
            {
              "in": "path",
              "name": "category",            
              "example": "fish",
              "schema": {
                "minimum": 1
              }
            },
            {
              "in": "path",
              "name": "keyword",            
              "example": "marlin",
              "schema": {
                "minimum": 1
              }
            }
          ],
          "security": [{ "Bearer": [] }],
          "responses": {
            "200": {
              "description": "Successful operation, products list is got",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetAllProductsResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized (email or password is wrong)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorUnauthorizedResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorNotFoundResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorServerResponse"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": ["Diary"],
          "summary": "Add new board",
          "parameters": [],
          "security": [{ "Bearer": [] }],
          "requestBody": {
            "description": "Board's object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddBoardRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Successful operation, new board added",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AddBoardResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request (invalid request body)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorBadRequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized (email or password is wrong)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorUnauthorizedResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorNotFoundResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorServerResponse"
                  }
                }
              }
            }
          }
        }
      }
    
    },
  
    "components": {
      "schemas": {
        "RegistrationRequest": {
          "type": "object",
          "required": ["name", "email", "password"],
          "properties": {
            "name": {
              "type": "string",
              "description": "User's name. It must contain only Latin letters; may contain space, numbers, signs, letters in different case",
              "example": "Mango"
            },
            "email": {
              "type": "string",
              "description": "User's email. It must contain only Latin letters; may include numbers, letters in different case",
              "format": "email",
              "example": "mango@email.com"
            },
            "password": {
              "type": "string",
              "description": "User's password. It must contain only Latin letters; may contain numbers, signs, letters in different case; does not contain a space.",
              "example": "Mango12378"
            }
          }
        },
        "RegistrationResponse": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "description": "User's token",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1MDU3YWUxNjQ1OTIxYTA2MDFhYmY2YyIsImlhdCI6MTY5NDg1Nzk1MywiZXhwIjoxNjk0OTQwNzUzfQ.seYxxZquM5Sw6P1gKXGgKog2oWPh5mJClN0c1Bf2x38"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-09T18:30:47.840Z"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-09T18:31:22.235Z"
            }
          }
        },
  
        "LoginRequest": {
          "type": "object",
          "required": ["email", "password"],
          "properties": {
            "email": {
              "type": "string",
              "description": "User's email.  It must contain only Latin letters; may include numbers, letters in different case",
              "format": "email",
              "example": "mango@email.com"
            },
            "password": {
              "type": "string",
              "description": "User's password. It must contain only Latin letters, at least one uppercase, lowercase letter and a number; does not contain a space",
              "example": "Mango12378"
            }
          }
        },
        "LoginResponse": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "description": "User's token",
              "format": "Bearer Token",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDRjMzdlMTQ5MzBjMTVhMTg1ZGQyMCIsImlhdCI6MTY5MTY2NTM1MSwiZXhwIjoxNjkxNjY3MTUxfQ.6Vv03mAwPPixXqJkc0DfsYWwEY53EGJKGOUq2HZrQ9o"
            },
            "user": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User's name",
                  "example": "Mango"
                },
                "email": {
                  "type": "string",
                  "description": "User's email",
                  "format": "email",
                  "example": "mango@email.com"
                },
               
                "avatarURL": {
                  "type": "string",
                  "description": "User's avatar",
                  "example": ""
                },
                "dailyСalories": {
                  "type": "number",
                  "description": "User's dailyCalories",
                  "example": 2200
                },
                "dailyTime": {
                  "type": "number",
                  "description": "User's daily sport time",
                  "example": 110
                },
                "bodyParameters": {
                  "type": "object", 
                  "properties": {
                    "height": {
                      "type": "number",
                      "description": "User's height",
                      "example": 184
                    },
                    "currentWeight": {
                      "type": "number",
                      "description": "User's current weight. Can't be more than 400.",
                      "example": 100
                    },
                    "desiredWeight": {
                      "type": "number",
                      "description": "User's desired weight. Can't be less than 50% of current weight.",
                      "example": 80
                    },
                    "birthday": {
                      "type": "string",
                      "description": "User's birthday. Format dd-mm-YYYY",
                      "example": "08-09-1999"
                    },
                    "blood": {
                      "type": "number",
                      "description": "User's blood",
                      "enum": [1, 2, 3, 4],
                      "example": 1
                    },
                    "sex": {
                      "type": "string",
                      "description": "User's sex",
                      "enum": ["male", "female"],
                      "example": "male"
                    },
                    "levelActivity:": {
                      "type": "number",
                      "description": "User's desired level activity. 1 - easy, 5 - hard",
                      "enum": [1, 2, 3, 4, 5],
                      "example": "1"
                    }      
                  }
                }
                
                        
              }
            }
          }
        },
  
        "CurrentUserResponse": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "User's id",
              "example": "321b432324dc36545474"
            },
            "name": {
              "type": "string",
              "description": "User's name",
              "example": "Mango"
            },
            "email": {
              "type": "string",
              "description": "User's email",
              "format": "email",
              "example": "mango@email.com"
            },
            "theme": {
              "type": "string",
              "description": "User's theme",
              "enum": ["dark", "violet", "light"],
              "example": "dark"
            },
            "avatarURL": {
              "type": "string",
              "description": "User's avatar",
              "example": ""
            }
          }
        },
        "CreateUserDataRequest": {
          "type": "object",
          "required": ["name", "height", "currentWeight", "desiredWeight", "birthday", "blood", "sex", "levelActivity"],
          "properties": {
            "name": {
              "type": "string",
              "description": "User's name. It must contain only Latin letters; may contain numbers, signs, letters in different case",
              "example": "Mango"
            },
            "height": {
              "type": "number",
              "description": "User's height",
              "example": 184
            },
            "currentWeight": {
              "type": "number",
              "description": "User's current weight. Can't be more than 400.",
              "example": 100
            },
            "desiredWeight": {
              "type": "number",
              "description": "User's desired weight. Can't be less than 50% of current weight.",
              "example": 80
            },
            "birthday": {
              "type": "string",
              "description": "User's birthday. Format dd-mm-YYYY",
              "example": "08-09-1999"
            },
            "blood": {
              "type": "number",
              "description": "User's blood",
              "enum": [1, 2, 3, 4],
              "example": 1
            },
            "sex": {
              "type": "string",
              "description": "User's sex",
              "enum": ["male", "female"],
              "example": "male"
            },
            "levelActivity:": {
              "type": "number",
              "description": "User's desired level activity. 1 - easy, 5 - hard",
              "enum": [1, 2, 3, 4, 5],
              "example": "1"
            }
          
          }
        },
        "CreateUserDataResponse": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "User's name. It must contain only Latin letters; may contain numbers, signs, letters in different case",
              "example": "Mango"
            },
            "avatarURL": {
              "type": "string",
              "description": "User's avatar",
              "example": ""
            },
            "height": {
              "type": "number",
              "description": "User's height",
              "example": 184
            },
            "currentWeight": {
              "type": "number",
              "description": "User's current weight. Can't be more than 400.",
              "example": 100
            },
            "desiredWeight": {
              "type": "number",
              "description": "User's desired weight. Can't be less than 50% of current weight.",
              "example": 80
            },
            "birthday": {
              "type": "string",
              "description": "User's birthday. Format dd-mm-YYYY",
              "example": "08-09-1999"
            },
            "blood": {
              "type": "number",
              "description": "User's blood",
              "enum": [1, 2, 3, 4],
              "example": 1
            },
            "sex": {
              "type": "string",
              "description": "User's sex",
              "enum": ["male", "female"],
              "example": "male"
            },
            "levelActivity:": {
              "type": "number",
              "description": "User's desired level activity. 1 - easy, 5 - hard",
              "enum": [1, 2, 3, 4, 5],
              "example": "1"
            }
          
          }
        },
  
        "UpdateUserDataRequest": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "User's name. It must contain only Latin letters; may contain numbers, signs, letters in different case",
              "example": "Mango"
            },
            "avatarURL": {
              "type": "string",
              "description": "User's avatar",
              "example": ""
            },
            "height": {
              "type": "number",
              "description": "User's height",
              "example": 184
            },
            "currentWeight": {
              "type": "number",
              "description": "User's current weight. Can't be more than 400.",
              "example": 100
            },
            "desiredWeight": {
              "type": "number",
              "description": "User's desired weight. Can't be less than 50% of current weight.",
              "example": 80
            },
            "birthday": {
              "type": "string",
              "description": "User's birthday. Format dd-mm-YYYY",
              "example": "08-09-1999"
            },
            "blood": {
              "type": "number",
              "description": "User's blood",
              "enum": [1, 2, 3, 4],
              "example": 1
            },
            "sex": {
              "type": "string",
              "description": "User's sex",
              "enum": ["male", "female"],
              "example": "male"
            },
            "levelActivity:": {
              "type": "number",
              "description": "User's desired level activity. 1 - easy, 5 - hard",
              "enum": [1, 2, 3, 4, 5],
              "example": "1"
            }
          
          }
        },
        "UpdateUserDataResponse": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "User's name. It must contain only Latin letters; may contain numbers, signs, letters in different case",
              "example": "Mango"
            },
            "avatarURL": {
              "type": "string",
              "description": "User's avatar",
              "example": ""
            },
            "height": {
              "type": "number",
              "description": "User's height",
              "example": 184
            },
            "currentWeight": {
              "type": "number",
              "description": "User's current weight. Can't be more than 400.",
              "example": 100
            },
            "desiredWeight": {
              "type": "number",
              "description": "User's desired weight. Can't be less than 50% of current weight.",
              "example": 80
            },
            "birthday": {
              "type": "string",
              "description": "User's birthday. Format dd-mm-YYYY",
              "example": "08-09-1999"
            },
            "blood": {
              "type": "number",
              "description": "User's blood",
              "enum": [1, 2, 3, 4],
              "example": 1
            },
            "sex": {
              "type": "string",
              "description": "User's sex",
              "enum": ["male", "female"],
              "example": "male"
            },
            "levelActivity:": {
              "type": "number",
              "description": "User's desired level activity. 1 - easy, 5 - hard",
              "enum": [1, 2, 3, 4, 5],
              "example": "1"
            }
          
          }
        },
  
        "UpdateThemeRequest": {
          "type": "object",
          "required": ["theme"],
          "properties": {
            "theme": {
              "type": "string",
              "description": "User's theme. Theme field must be one of the next value - light, dark or violet",
              "enum": ["dark", "light", "violet"],
              "example": "violet"
            }
          }
        },
        "UpdateThemeResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "User's theme",
              "example": "Theme changed"
            }
          }
        },
  
        "HelpRequest": {
          "type": "object",
          "required": ["email", "comment"],
          "properties": {
            "email": {
              "type": "string",
              "description": "User's email.  It must contain only Latin letters; may include numbers, letters in different case",
              "format": "email",
              "example": "mango@email.com"
            },
            "comment": {
              "type": "string",
              "description": "User's comment. It must contain minimum 10 characters and maximum 256",
              "example": "Hi! I need your help with some question..."
            }
          }
        },
        "HelpResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "User's comment",
              "example": "Your comment has been sent"
            }
          }
        },
  
        "GetAllProductsResponse": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Product id",
                "example": "64d360ea78fe376e4981199f"
              },
              "title": {
                "type": "string",
                "description": "Product's title",
                "example": "Danbo cheese"
              },
              "weight": {
                "type": "number",
                "description": "Static product weight examle",
                "enum": [
                  100
                ],
                "example": "100"
              },
              "calories": {
                "type": "number",
                "description": "Product calories/100g",
                "example": 357
              },
              "category": {
                "type": "string",
                "description": "Product`s category",
                "example": "cereals"
              },
              "groupBloodNotAllowed": {
                "type": "object",
                "properties": {
                  "1": {
                    "type": "boolean",
                    "description": "User's blood",
                    "example": true
                  },
                  "2": {
                    "type": "boolean",
                    "description": "User's blood",
                    "example": true
                  },
                  "3": {
                    "type": "boolean",
                    "description": "User's blood",
                    "example": true
                  },
                  "4": {
                    "type": "boolean",
                    "description": "User's blood",
                    "example": true
                  }
                }
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2023-08-09T18:30:47.840Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2023-08-09T18:31:22.235Z"
              }
            }
          }
        },
        "GetBoardByIdResponse": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Board id",
              "example": "64d360ea78fe376e4981199f"
            },
            "title": {
              "type": "string",
              "description": "Board's title",
              "example": "First Board"
            },
            "icon": {
              "type": "string",
              "description": "Board's icon",
              "enum": [
                "icon-colors",
                "icon-container",
                "icon-hexagon",
                "icon-lightning",
                "icon-loading",
                "icon-project",
                "icon-star",
                "icon-puzzle-piece"
              ],
              "example": "icon-hexagon"
            },
            "background": {
              "type": "string",
              "description": "Board's background",
              "enum": [
                "airBalloon",
                "blue",
                "cappadocia",
                "flowers",
                "gorge",
                "greens",
                "moon",
                "mountains",
                "rocksAndSea",
                "sea",
                "semiMoon",
                "trailer",
                "tree",
                "yacht",
                "violetSphere",
                "default"
              ],
              "example": "greens"
            },
            "columnOrder": {
              "type": "array",
              "description": "Column order",
              "example": ["64d52e77846f3f325f35b8f0"]
            },
            "owner": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User's name",
                  "example": "Mango"
                },
                "email": {
                  "type": "string",
                  "description": "User's email",
                  "format": "email",
                  "example": "mango@email.com"
                },
  
                "avatarURL": {
                  "type": "string",
                  "description": "User's avatar",
                  "example": ""
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-08-09T18:30:47.840Z"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-08-09T18:31:22.235Z"
                }
              }
            },
            "columns": {
              "type": "array",
              "description": "Columns",
              "example": [
                {
                  "_id": "64d5585cf10982f0832226f4",
                  "title": "2222222",
                  "board": "64d52e77846f3f325f35b8f0",
                  "taskOrder": [
                    "64d8907409b4e55ec6255990",
                    "64d8907809b4e55ec6255994",
                    "64d8901109b4e55ec6255983",
                    "64d88e0d09b4e55ec625596c"
                  ],
                  "createdAt": "2023-08-10T21:36:28.801Z",
                  "updatedAt": "2023-08-13T08:13:04.104Z",
                  "tasks": [
                    {
                      "_id": "64d8901109b4e55ec6255983",
                      "title": "Task 1",
                      "description": "This is the description of task 1",
                      "priority": "without",
                      "deadline": null,
                      "column": "64d5585cf10982f0832226f4",
                      "createdAt": "2023-08-13T08:10:57.245Z",
                      "updatedAt": "2023-08-13T08:13:04.154Z"
                    },
                    {
                      "_id": "64d8907409b4e55ec6255990",
                      "title": "Task 2",
                      "description": "This is the description of task 2",
                      "priority": "low",
                      "deadline": "21/12/2022",
                      "column": "64d5585cf10982f0832226f4",
                      "createdAt": "2023-08-13T08:12:36.110Z",
                      "updatedAt": "2023-08-13T08:12:36.110Z"
                    },
                    {
                      "_id": "64d88e0d09b4e55ec625596c",
                      "title": "Task 3",
                      "description": "This is the description of task 3",
                      "priority": "medium",
                      "deadline": "13/04/2023",
                      "column": "64d5585cf10982f0832226f4",
                      "createdAt": "2023-08-13T08:12:40.524Z",
                      "updatedAt": "2023-08-13T08:12:40.524Z"
                    },
                    {
                      "_id": "64d8907809b4e55ec6255994",
                      "title": "Task 4",
                      "description": "This is the description of task 4",
                      "priority": "high",
                      "deadline": null,
                      "column": "64d5585cf10982f0832226f4",
                      "createdAt": "2023-08-13T08:12:40.524Z",
                      "updatedAt": "2023-08-13T08:12:40.524Z"
                    }
                  ]
                }
              ]
            }
          }
        },
  
        "AddBoardRequest": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Board's title",
              "example": "First Board"
            },
            "icon": {
              "type": "string",
              "description": "Board's icon",
              "enum": [
                "icon-colors",
                "icon-container",
                "icon-hexagon",
                "icon-lightning",
                "icon-loading",
                "icon-project",
                "icon-star",
                "icon-puzzle-piece"
              ],
              "example": "icon-hexagon"
            },
            "background": {
              "type": "string",
              "description": "Board's background",
              "enum": [
                "airBalloon",
                "blue",
                "cappadocia",
                "flowers",
                "gorge",
                "greens",
                "moon",
                "mountains",
                "rocksAndSea",
                "sea",
                "semiMoon",
                "trailer",
                "tree",
                "yacht",
                "violetSphere",
                "default"
              ],
              "example": "greens"
            }
          },
          "required": ["title"]
        },
        "AddBoardResponse": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Board id",
              "example": "64d360ea78fe376e4981199f"
            },
            "title": {
              "type": "string",
              "description": "Board's title",
              "example": "First Board"
            },
            "icon": {
              "type": "string",
              "description": "Board's icon",
              "example": "icon-hexagon"
            },
            "background": {
              "type": "string",
              "description": "Board's background",
              "example": "sea"
            },
            "columnOrder": {
              "type": "array",
              "description": "Column order",
              "example": []
            },
            "owner": {
              "type": "string",
              "description": "Owner`s id",
              "example": "64d11ad3b31bb700519dad42"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-09T18:30:47.840Z"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-09T18:31:22.235Z"
            }
          }
        },
  
        "UpdateBoardRequest": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Board's title",
              "example": "First Board"
            },
            "icon": {
              "type": "string",
              "description": "Board's icon",
              "enum": [
                "icon-colors",
                "icon-container",
                "icon-hexagon",
                "icon-lightning",
                "icon-loading",
                "icon-project",
                "icon-star",
                "icon-puzzle-piece"
              ],
              "example": "icon-hexagon"
            },
            "background": {
              "type": "string",
              "description": "Board's background",
              "enum": [
                "airBalloon",
                "blue",
                "cappadocia",
                "flowers",
                "gorge",
                "greens",
                "moon",
                "mountains",
                "rocksAndSea",
                "sea",
                "semiMoon",
                "trailer",
                "tree",
                "yacht",
                "violetSphere",
                "default"
              ],
              "example": "greens"
            }
          }
        },
        "UpdateBoardResponse": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Board id",
              "example": "64d360ea78fe376e4981199f"
            },
            "title": {
              "type": "string",
              "description": "Board's title",
              "example": "First Board"
            },
            "icon": {
              "type": "string",
              "description": "Board's icon",
              "enum": [
                "icon-colors",
                "icon-container",
                "icon-hexagon",
                "icon-lightning",
                "icon-loading",
                "icon-project",
                "icon-star",
                "icon-puzzle-piece"
              ],
              "example": "icon-hexagon"
            },
            "background": {
              "type": "string",
              "description": "Board's background title",
              "example": "greens"
            },
            "columnOrder": {
              "type": "array",
              "description": "Column order",
              "example": []
            },
            "owner": {
              "type": "string",
              "description": "User's id",
              "example": "64d11ad3b31bb700519dad42"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-09T18:30:47.840Z"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-09T18:31:22.235Z"
            }
          }
        },
  
        "DeleteBoardResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Board id",
              "example": "Board {id} deleted successfully"
            },
            "data": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Board id",
                  "example": "64d360ea78fe376e4981199f"
                },
                "title": {
                  "type": "string",
                  "description": "Board's title",
                  "example": "First Board"
                },
                "icon": {
                  "type": "string",
                  "description": "Board's icon",
                  "enum": [
                    "icon-colors",
                    "icon-container",
                    "icon-hexagon",
                    "icon-lightning",
                    "icon-loading",
                    "icon-project",
                    "icon-star",
                    "icon-puzzle-piece"
                  ],
                  "example": "icon-hexagon"
                },
                "background": {
                  "type": "string",
                  "description": "Board's background title",
                  "example": "moon"
                },
                "columnOrder": {
                  "type": "array",
                  "description": "Column order",
                  "example": []
                },
                "owner": {
                  "type": "string",
                  "description": "User's id",
                  "example": "64d11ad3b31bb700519dad42"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-08-09T18:30:47.840Z"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-08-09T18:31:22.235Z"
                }
              }
            }
          }
        },
  
        "AddColumnRequest": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Column's title",
              "example": "First Column"
            },
            "board": {
              "type": "string",
              "description": "Board id",
              "example": "64d360ea78fe376e4981199f"
            }
          },
          "required": ["title", "board"]
        },
        "AddColumnResponse": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Column`s id",
              "example": "64d360ea78fe376e4981199f"
            },
            "title": {
              "type": "string",
              "description": "Column's title",
              "example": "First Column"
            },
            "board": {
              "type": "string",
              "description": "Board id",
              "example": "64d360ea78fe376e4981199f"
            },
            "taskOrder": {
              "type": "array",
              "description": "Task order",
              "example": []
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-09T18:30:47.840Z"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-09T18:31:22.235Z"
            }
          }
        },
  
        "UpdateColumnRequest": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Column's title",
              "example": "First Column"
            }
          },
          "required": ["title"]
        },
        "UpdateColumnResponse": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Column`s id",
              "example": "64d360ea78fe376e4981199f"
            },
            "title": {
              "type": "string",
              "description": "Column's title",
              "example": "First Column"
            },
            "board": {
              "type": "string",
              "description": "Board id",
              "example": "64d360ea78fe376e4981199f"
            },
            "taskOrder": {
              "type": "array",
              "description": "Task order",
              "example": []
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-09T18:30:47.840Z"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-09T18:31:22.235Z"
            }
          }
        },
  
        "TransferColumnRequest": {
          "type": "object",
          "properties": {
            "source": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "number",
                  "description": "Column index",
                  "example": 0
                },
                "droppableId": {
                  "type": "string",
                  "description": "Column id",
                  "example": "64d360ea78fe376e4981199f"
                }
              },
              "required": ["droppableId"]
            },
            "destination": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "number",
                  "description": "Column index",
                  "example": 1
                },
                "droppableId": {
                  "type": "string",
                  "description": "Column id",
                  "example": "64d360ea78fe376e4981199f"
                }
              },
              "required": ["index", "droppableId"]
            }
          }
        },
        "TransferColumnResponse": {
          "type": "object",
          "properties": {
            "board": {
              "type": "string",
              "description": "Board id",
              "example": "64d360ea78fe376e4981199f"
            },
            "message": {
              "type": "string",
              "description": "Board's title",
              "example": "Column position has been changed to {index} on board {id}"
            }
          }
        },
  
        "DeleteColumnResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Column id",
              "example": "Column {id} deleted successfully"
            },
            "data": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Column id",
                  "example": "64d360ea78fe376e4981199f"
                },
                "title": {
                  "type": "string",
                  "description": "Column's title",
                  "example": "First Column"
                },
                "board": {
                  "type": "string",
                  "description": "Board id",
                  "example": "64d360ea78fe376e4981199f"
                },
                "taskOrder": {
                  "type": "array",
                  "description": "Task order",
                  "example": []
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-08-09T18:30:47.840Z"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-08-09T18:31:22.235Z"
                }
              }
            }
          }
        },
  
        "AddTaskRequest": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Task's title",
              "example": "First Task"
            },
            "description": {
              "type": "string",
              "description": "Task's description",
              "example": "Description of the task"
            },
            "priority": {
              "type": "string",
              "description": "User's theme",
              "enum": ["without", "low", "medium", "high"],
              "example": "low"
            },
            "deadline": {
              "type": "string",
              "description": "Task's deadline",
              "example": "10/08/2023"
            },
            "column": {
              "type": "string",
              "description": "Board id",
              "example": "64d360ea78fe376e4981199f"
            }
          },
          "required": ["title", "description", "column"]
        },
        "AddTaskResponse": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Task`s id",
              "example": "64d360ea78fe376e4981199f"
            },
            "title": {
              "type": "string",
              "description": "Task's title",
              "example": "First Task"
            },
            "description": {
              "type": "string",
              "description": "Task's description",
              "example": "Description of the task"
            },
            "priority": {
              "type": "string",
              "description": "User's theme",
              "enum": ["without", "low", "medium", "high"],
              "example": "low"
            },
            "deadline": {
              "type": "string",
              "description": "Task's deadline",
              "example": "10/08/2023"
            },
            "board": {
              "type": "string",
              "description": "Board id",
              "example": "64d360ea78fe376e4981199f"
            },
            "column": {
              "type": "string",
              "description": "Column id",
              "example": "64d360ea78fe376e4981199f"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-09T18:30:47.840Z"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-09T18:31:22.235Z"
            }
          }
        },
  
        "UpdateTaskRequest": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Task's title",
              "example": "First Task"
            },
            "description": {
              "type": "string",
              "description": "Task's description",
              "example": "Description of the task"
            },
            "priority": {
              "type": "string",
              "description": "User's theme",
              "enum": ["without", "low", "medium", "high"],
              "example": "low"
            },
            "deadline": {
              "type": "string",
              "description": "Task's deadline",
              "example": "10/08/2023"
            }
          }
        },
        "UpdateTaskResponse": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Task`s id",
              "example": "64d360ea78fe376e4981199f"
            },
            "title": {
              "type": "string",
              "description": "Task's title",
              "example": "First Task"
            },
            "description": {
              "type": "string",
              "description": "Task's description",
              "example": "Description of the task"
            },
            "priority": {
              "type": "string",
              "description": "User's theme",
              "enum": ["without", "low", "medium", "high"],
              "example": "low"
            },
            "deadline": {
              "type": "string",
              "description": "Task's deadline",
              "example": "10/08/2023"
            },
            "board": {
              "type": "string",
              "description": "Board id",
              "example": "64d360ea78fe376e4981199f"
            },
            "column": {
              "type": "string",
              "description": "Column id",
              "example": "64d360ea78fe376e4981199f"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-09T18:30:47.840Z"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-09T18:31:22.235Z"
            }
          }
        },
  
        "TransferTaskRequest": {
          "type": "object",
          "properties": {
            "source": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "number",
                  "description": "Task index",
                  "example": 0
                },
                "droppableId": {
                  "type": "string",
                  "description": "Task id",
                  "example": "64d360ea78fe376e4981199f"
                }
              },
              "required": ["droppableId"]
            },
            "destination": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "number",
                  "description": "Task index",
                  "example": 1
                },
                "droppableId": {
                  "type": "string",
                  "description": "Task id",
                  "example": "64d360ea78fe376e4981199f"
                }
              },
              "required": ["index", "droppableId"]
            }
          }
        },
        "TransferTaskResponse": {
          "type": "object",
          "properties": {
            "board": {
              "type": "string",
              "description": "Board id",
              "example": "64d360ea78fe376e4981199f"
            },
            "message": {
              "type": "string",
              "description": "Board's title",
              "example": "Task position has been changed to {index} in column {id}"
            }
          }
        },
  
        "DeleteTaskResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Task id",
              "example": "Task {id} deleted successfully"
            },
            "data": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Task id",
                  "example": "64d360ea78fe376e4981199f"
                },
                "title": {
                  "type": "string",
                  "description": "Task's title",
                  "example": "First Task"
                },
                "column": {
                  "type": "string",
                  "description": "Column id",
                  "example": "64d360ea78fe376e4981199f"
                },
                "taskOrder": {
                  "type": "array",
                  "description": "Task order",
                  "example": []
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-08-09T18:30:47.840Z"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-08-09T18:31:22.235Z"
                }
              }
            }
          }
        },

        "successfulCreateResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Success message",
              "example": "User data was created successful"
            }
          }
        },
        "successfulUpdateResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Success message",
              "example": "User data was updated successful"
            }
          }
        },
        
        "errorBadRequestResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Error message",
              "example": "This text will describe what is wrong with the request body"
            }
          }
        },
        "errorConflictResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Error message",
              "example": "Email has already in use"
            }
          }
        },
        "errorUnauthorizedResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Error message",
              "example": "Unauthorized"
            }
          }
        },
        "errorNotFoundResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Error message",
              "example": "Not Found"
            }
          }
        },
        "errorNotFoundBoardResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Error message",
              "example": "Board {id} not found"
            }
          }
        },
        "errorNotFoundColumnResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Error message",
              "example": "Column {id} not found"
            }
          }
        },
        "errorNotFoundTaskResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Error message",
              "example": "Task {id} not found"
            }
          }
        },
        "errorServerResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Error message",
              "example": "This text will describe what is wrong with the internal server"
            }
          }
        }
      },
      "securitySchemes": {
        "Bearer": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      }
    }
  }